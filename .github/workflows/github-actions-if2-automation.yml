name: Connect to EC2 and Download Files

on:
  push:
    branches:
      - main

jobs:
  connect-and-download:
    runs-on: ubuntu-latest
    container:
      image: assassin010/ubuntu:ubuntu-latest-plus

    steps:
      - name: Debug Info
        run: |
          docker version
          uname -a
          cat /etc/os-release
          cat /proc/cpuinfo

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Session Manager Plugin
        run: |
          echo "Downloading Session Manager Plugin..."
          curl "https://s3.amazonaws.com/session-manager-downloads/plugin/latest/ubuntu_64bit/session-manager-plugin.deb" -o "session-manager-plugin.deb"
          echo "Installing Session Manager Plugin..."
          dpkg -i session-manager-plugin.deb

      - name: Verify Session Manager Plugin Installation
        run: |
          echo "Verifying Session Manager Plugin installation..."
          session_manager_plugin_version=$(session-manager-plugin --version 2>&1)
          echo "Session Manager Plugin version: $session_manager_plugin_version"
        
      - name: Configure AWS CLI
        run: |
          echo "Configuring AWS CLI..."
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          export AWS_DEFAULT_REGION=us-east-1

      - name: Create SSM Document
        run: echo -n "$(cat download_files_ssm_document.json)" > ssm_document_content.json

      - name: Run SSM Document
        run: |
          instance_id="i-05aae421de061543f"
          echo "Connecting to EC2 Instance..."
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --instance-ids $instance_id \
            --parameters "commands=$(cat ssm_document_content.json)"
        env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_DEFAULT_REGION: us-east-1  

      # - name: Start SSM Session
      #   env:
      #     AWS_DEFAULT_REGION: us-east-1  
      #   run: |
      #     instance_id="i-05aae421de061543f"
      #     echo "Connecting to EC2 Instance..."
      #     aws ssm start-session --target $instance_id
          
      #     # Commands to check your environment inside the EC2 instance
      #     echo "Inside the EC2 instance."
      #     echo "Current directory: $(pwd)"
      #     echo "List files: $(ls)"
      #     echo "Running uname -a: $(uname -a)"
          
      #     # Download files from the Internet
      #     echo "Downloading files from the Internet..."
      #     wget https://github.com/amazonlinux/amazon-linux-2023 -O /home/sguser/amazon-linux-2023
      #     curl -O https://github.com/alpinelinux/docker-alpine/tree/7385303148c97ef32a3f225ec03bafa46b689d12/x86_64 -o /home/sguser/docker-alpine-x86_64
          
  cleanup:
    runs-on: ubuntu-latest
    needs: connect-and-download
    if: ${{ always() }}  # Ensure cleanup runs even if the previous job fails
    steps:
      - name: Cleanup
        run: |
          # Retrieve the stored container ID
          container_id=${{ needs.connect-and-download.outputs.container_id }}
          if [ -n "$container_id" ]; then
            # Use the container ID in the cleanup command
            docker exec $container_id sh -c "cat /etc/*release | grep ^ID"
          else
            echo "Container ID not found."
          fi
